generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Address {
  id               String      @id @default(cuid())
  userId           String
  type             AddressType @default(SHIPPING)
  isDefault        Boolean     @default(false)
  fullName         String
  addressLine1     String
  addressLine2     String?
  city             String
  state            String
  zipCode          String
  country          String      @default("US")
  phone            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  ordersAsBilling  Order[]     @relation("Order_billingAddressIdToAddress")
  ordersAsShipping Order[]     @relation("Order_shippingAddressIdToAddress")
}

model AdminAuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model AdminSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  updatedBy   String?
  updatedAt   DateTime @updatedAt
}

model BestPrizes {
  id               String    @id @default(cuid())
  gameId           String    @unique
  bestTicket       Json
  bestMemorabillia Json
  updatedAt        DateTime  @updatedAt
  game             DailyGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Break {
  id             String   @id @default(cuid())
  externalId     String?  @unique
  sport          Sport
  productName    String
  breakDate      DateTime
  price          Float
  spotsAvailable Int?
  spotsTotal     Int?
  breaker        String   @default("Layton Sports Cards")
  streamUrl      String?
  isActive       Boolean  @default(true)
  lastUpdated    DateTime @default(now())
  spins          Spin[]
}

model CardBreak {
  id             String      @id @default(cuid())
  gameId         String
  breakName      String
  breakValue     Float
  breakDateTime  DateTime
  streamUrl      String?
  breaker        String
  status         BreakStatus @default(AVAILABLE)
  createdAt      DateTime    @default(now())
  breakType      String?
  scrapedAt      DateTime?
  sourceUrl      String?
  spotPrice      Float?
  teamName       String?
  category       String?
  description    String?
  imageUrl       String?
  itemType       String?     @default("memorabilia")
  quantity       Int         @default(1)
  availablePacks Json        @default("[\"blue\", \"red\", \"gold\"]")
  availableUnits Json        @default("[1, 2, 3, 4]")
  tierLevel      TierLevel?
  tierPriority   Int?
  game           DailyGame   @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model DailyGame {
  id                 String         @id @default(cuid())
  eventName          String
  eventDate          DateTime
  venue              String
  city               String
  state              String
  sport              Sport
  isActive           Boolean        @default(false)
  maxEntries         Int            @default(100)
  currentEntries     Int            @default(0)
  status             GameStatus     @default(DRAFT)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  avgBreakValue      Float?
  avgTicketPrice     Float?
  spinPricePerBundle Float?
  stadiumId          String?
  spinPrice1x        Float?
  spinPrice2x        Float?
  spinPrice3x        Float?
  spinPrice4x        Float?
  bestPrizes         BestPrizes?
  cardBreaks         CardBreak[]
  stadium            Stadium?       @relation(fields: [stadiumId], references: [id])
  entries            GameEntry[]
  prizePools         PrizePool[]
  specialPrizes      SpecialPrize[]
  spinResults        SpinResult[]
  ticketGroups       TicketGroup[]
  ticketLevels       TicketLevel[]
}

model EmailCampaign {
  id             String    @id @default(cuid())
  subject        String
  content        String
  previewText    String?
  ctaText        String?
  ctaUrl         String?
  recipientCount Int       @default(0)
  sentCount      Int       @default(0)
  openCount      Int       @default(0)
  clickCount     Int       @default(0)
  status         String    @default("DRAFT")
  sentBy         String?
  sentAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Event {
  id                String   @id @default(cuid())
  ticketEvolutionId String   @unique
  name              String
  sport             Sport
  venue             String
  city              String
  state             String?
  datetime          DateTime
  minPrice          Float?
  maxPrice          Float?
  averagePrice      Float?
  inventoryCount    Int?
  isActive          Boolean  @default(true)
  lastUpdated       DateTime @default(now())
  spins             Spin[]
}

model GameEntry {
  id              String    @id @default(cuid())
  gameId          String
  userId          String
  entryNumber     Int
  paymentIntentId String?
  paidAt          DateTime?
  createdAt       DateTime  @default(now())
  game            DailyGame @relation(fields: [gameId], references: [id])
  user            User      @relation(fields: [userId], references: [id])

  @@unique([gameId, entryNumber])
}

model Lead {
  id        String     @id @default(cuid())
  email     String     @unique
  source    String     @default("landing")
  status    LeadStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Order {
  id                String            @id @default(cuid())
  userId            String
  spinId            String            @unique
  orderNumber       String            @unique
  stripePaymentId   String?
  paymentStatus     PaymentStatus     @default(PENDING)
  amount            Float
  ticketOrderId     String?
  breakOrderId      String?
  fulfillmentStatus FulfillmentStatus @default(PENDING)
  shippingAddressId String?
  billingAddressId  String?
  trackingNumber    String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  billingAddress    Address?          @relation("Order_billingAddressIdToAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address?          @relation("Order_shippingAddressIdToAddress", fields: [shippingAddressId], references: [id])
  spin              Spin              @relation(fields: [spinId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PrizePool {
  id         String     @id @default(cuid())
  gameId     String
  bundleSize Int
  bundles    Json
  totalValue Float
  totalPrice Float
  status     PoolStatus @default(AVAILABLE)
  claimedAt  DateTime?
  claimedBy  String?
  createdAt  DateTime   @default(now())
  game       DailyGame  @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId, bundleSize, status])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SpecialPrize {
  id             String    @id @default(cuid())
  gameId         String
  name           String
  description    String
  value          Float
  quantity       Int
  imageUrl       String?
  prizeType      String
  metadata       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  availableUnits Json      @default("[1, 2, 3, 4]")
  backupFor      String?
  isBackup       Boolean   @default(false)
  game           DailyGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Spin {
  id             String     @id @default(cuid())
  userId         String
  eventId        String
  breakId        String
  status         SpinStatus @default(PENDING)
  ticketQuantity Int
  breakQuantity  Int
  totalCost      Float
  ticketsWon     Json?
  breaksWon      Json?
  riskProfile    Json?
  createdAt      DateTime   @default(now())
  completedAt    DateTime?
  order          Order?
  break          Break      @relation(fields: [breakId], references: [id])
  event          Event      @relation(fields: [eventId], references: [id])
  user           User       @relation(fields: [userId], references: [id])
}

model SpinBundle {
  id             String     @id @default(cuid())
  spinResultId   String
  ticketSection  String
  ticketRow      String
  ticketValue    Float
  ticketQuantity Int        @default(1)
  breaks         Json
  bundleValue    Float
  spinResult     SpinResult @relation(fields: [spinResultId], references: [id], onDelete: Cascade)
}

model SpinResult {
  id                    String        @id @default(cuid())
  gameId                String
  userId                String
  totalPrice            Float
  paymentIntentId       String?
  paidAt                DateTime?
  createdAt             DateTime      @default(now())
  adjacentSeats         Boolean       @default(false)
  quantity              Int
  totalValue            Float
  memorabiliaShipped    Boolean       @default(false)
  memorabiliaShippedAt  DateTime?
  shippingCarrier       String?
  ticketsTransferred    Boolean       @default(false)
  ticketsTransferredAt  DateTime?
  trackingNumber        String?
  paymentStatus         PaymentStatus @default(PENDING)
  stripePaymentIntentId String?
  stripeSessionId       String?
  bundles               SpinBundle[]
  game                  DailyGame     @relation(fields: [gameId], references: [id])
  user                  User          @relation(fields: [userId], references: [id])
}

model Stadium {
  id                 String      @id @default(cuid())
  name               String      @unique
  displayName        String
  city               String
  state              String
  imagePath          String
  imageWidth         Int
  imageHeight        Int
  sectionConfig      Json
  isActive           Boolean     @default(true)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  defaultSeatViewUrl String?
  dailyGames         DailyGame[]
}

model TicketGroup {
  id                String       @id @default(cuid())
  gameId            String
  section           String
  row               String
  pricePerSeat      Float
  status            TicketStatus @default(AVAILABLE)
  ticketType        String?
  notes             String?
  createdAt         DateTime     @default(now())
  quantity          Int
  seatViewUrl       String?
  availableUnits    Json?
  seatViewUrl2      String?
  availablePacks    Json?
  primaryImageIndex Int?         @default(1)
  seatViewUrl3      String?
  tierLevel         TierLevel?
  tierPriority      Int?
  game              DailyGame    @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model TicketLevel {
  id             String     @id @default(cuid())
  gameId         String
  level          String
  levelName      String
  quantity       Int
  pricePerSeat   Float
  viewImageUrl   String?
  sections       String[]
  isSelectable   Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  availableUnits Json       @default("[1, 2, 3, 4]")
  tierLevel      TierLevel?
  tierPriority   Int?
  availablePacks Json?      @default("[\"blue\", \"red\", \"gold\"]")
  game           DailyGame  @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  password                String?
  name                    String?
  image                   String?
  emailVerified           DateTime?
  phone                   String?
  isAdmin                 Boolean                  @default(false)
  stripeCustomerId        String?                  @unique
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  accounts                Account[]
  addresses               Address[]
  adminAuditLogs          AdminAuditLog[]
  emailVerificationTokens EmailVerificationToken[]
  gameEntries             GameEntry[]
  orders                  Order[]
  passwordResetTokens     PasswordResetToken[]
  sessions                Session[]
  spins                   Spin[]
  spinResults             SpinResult[]
  profile                 UserProfile?
}

model UserProfile {
  id                      String    @id @default(cuid())
  userId                  String    @unique
  dateOfBirth             DateTime?
  preferredSport          Sport?
  notifyEmail             Boolean   @default(true)
  notifySms               Boolean   @default(false)
  marketingEmails         Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  ageVerified             Boolean   @default(false)
  ageVerifiedAt           DateTime?
  consentMarketingAt      DateTime?
  consentPrivacyPolicy    Boolean   @default(false)
  consentPrivacyPolicyAt  DateTime?
  consentTermsOfService   Boolean   @default(false)
  consentTermsOfServiceAt DateTime?
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum BreakStatus {
  AVAILABLE
  SOLD
  RESERVED
}

enum FulfillmentStatus {
  PENDING
  PROCESSING
  TICKETS_PURCHASED
  BREAKS_PURCHASED
  SHIPPED
  DELIVERED
  COMPLETED
  FAILED
}

enum GameStatus {
  DRAFT
  ACTIVE
  SOLD_OUT
  COMPLETED
  CANCELLED
}

enum LeadStatus {
  PENDING
  CONTACTED
  CONVERTED
  UNSUBSCRIBED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  EXPIRED
  REQUIRES_FULFILLMENT
}

enum PoolStatus {
  AVAILABLE
  CLAIMED
  STALE
}

enum SpinStatus {
  PENDING
  SPINNING
  COMPLETED
  CANCELLED
}

enum Sport {
  NFL
  NBA
  MLB
  NHL
  SOCCER
  UFC
  F1
  OTHER
}

enum TicketStatus {
  AVAILABLE
  SOLD
  RESERVED
}

enum TierLevel {
  VIP_ITEM
  GOLD_LEVEL
  UPPER_DECK
}
